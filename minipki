#!/Usr/bin/env python3
# -*- mode: python -*-

# minipki
# Author: Micah R Ledbetter
# Acknowledgements: 
# - http://sial.org/howto/openssl/ca/
# - http://www.openssl.org/docs/apps/ca.html

import sys, os, shutil, argparse, logging, subprocess, socket, re
#logging.basicConfig(level=logging.DEBUG) #show all messages up to and including logging.debug() messages
#keysize=512 #this is for testing purposes only - weak keys, but fast generation
keysize=4096 #I prefer large keys like this. You might instead prefer 1024 or 2048.

def is_exe(fpath):
    return os.path.exists(fpath) and os.access(fpath, os.X_OK)

def which(program):
    fpath, fname = os.path.split(program)
    if fpath:
        if is_exe(program):
            return program
    else:
        for path in os.environ["PATH"].split(os.pathsep):
            exe_file = os.path.join(path, program)
            if is_exe(exe_file):
                return exe_file
    return None

class MINIPKI:

    def initca(self, args):
        cacnf = "ca.openssl.cnf"

        if args.purge: #purge everything except ca.openssl.cnf
            for p in os.listdir("."): 
                if os.path.isfile(p) or os.path.islink(p): #os.unlink() handles both cases
                    os.unlink(p)
                elif os.path.isdir(p):
                    shutil.rmtree(p)
        else: #not told to purge, so if one of these exists, exit before overwriting something important
            for p in ["serial.txt", "index.txt", "private", "newcerts", "certified-keys", cacnf]:
                if (os.path.exists(p)):
                    print("Path '" + p + "' exists, exiting...")
                    sys.exit(1)

        #if not (os.path.exists(cacnf)):
        fcnf=open(cacnf,'w')
        fcnf.write(MINIPKI.build_ca_cnf(self,args))
        fcnf.close()

        fserial=open("serial.txt","w")
        fserial.write("01")
        fserial.close()
        open("index.txt","w").close() #create an empty file
        os.mkdir("private",0o700)
        os.mkdir("newcerts",0o700)
        os.mkdir("certified-keys",0o700)

        subprocess.check_call([opensslbin, 
                               "req", #request a new key
                               "-config", cacnf,
                               "-nodes",  #"No DES", i.e. don't create an encrypted key (and don't prompt for encryption password)
                               "-x509", #puts out a self-signed cert instead of a csr; required for a CA
                               "-days", "7300", #this is about 20 years, and also the max
                               "-out", "ca.cert.pem", #will output to stdout otherwise, which we don't want
                               "-newkey", "rsa:"+str(keysize), #create an RSA key and store it where specified in cnf
                               ])

    def genprivkey(self, args):
        keyname=args.keyname
        logging.debug("genprivkey args: %r" % args)
        subprocess.check_call([opensslbin, "genrsa", "-out", "certified-keys/"+keyname+".key", str(keysize)])
        if args.cnf: 
            if not (os.path.exists(args.cnf)):
                print("Server configuration file specified on command line as %r, but file does not exist. Exiting..." % args.cnf)
                sys.exit(1)
            servercnf=args.cnf
        else:
            servercnf="certified-keys/"+keyname+".openssl.cnf"
            if not (os.path.exists(servercnf)):
                logging.debug("genprivkey: openssl configuration file not present, generating...")
                MINIPKI.makecnf(self,args)
        subprocess.check_call([opensslbin, 
                               "req", 
                               "-new", 
                               "-nodes",
                               "-config", servercnf, 
                               "-key", "certified-keys/"+keyname+".key", 
                               "-out", "certified-keys/"+keyname+".csr"])

    def build_ca_cnf(self, args):
        # chunk1 is the stuff before the user settings
        # then come a few user-customizable things
        # then comes chunk2, the bulk of the file

        cacnf ="\n"
        cacnf+="# openssl.cnf.ca\n"
        cacnf+="# Via minipki\n"
        cacnf+="\n"
        cacnf+="HOME                    = .\n"
        cacnf+="RANDFILE                = $ENV::HOME/.rnd\n"
        cacnf+="\n"
        cacnf+="[ root_ca_distinguished_name ]\n"

        # this is checked by argparse so we know it exists
        cacnf+= "commonName = " + args.ca_commonName + "\n"
        if args.emailAddress:
            cacnf += "emailAddress = " + args.emailAddress + "\n"
        if args.countryName:
            cacnf += "countryName = " + args.countryName + "\n"
        if args.stateOrProvinceName:
            cacnf += "stateOrProvinceName = " + args.stateOrProvinceName + "\n"
        if args.localityName:
            cacnf += "localityName = " + args.localityName + "\n"
        if args.organizationName:
            cacnf += "organizationName = " + args.organizationName + "\n"

        cacnf+="\n"
        cacnf+="[ ca ]\n"
        cacnf+="default_ca      = CA_default\n"
        cacnf+="\n"
        cacnf+="[ CA_default ]\n"
        cacnf+="dir             = .\n"
        cacnf+="#certs           = $dir/certs\n"
        cacnf+="new_certs_dir   = $dir/newcerts\n"
        cacnf+="crl_dir         = $dir/crl\n"
        cacnf+="database        = $dir/index.txt\n"
        cacnf+="\n"
        cacnf+="certificate     = $dir/ca.cert.pem\n"
        cacnf+="serial          = $dir/serial.txt\n"
        cacnf+="crl             = $dir/ca.crl.pem\n"
        cacnf+="private_key     = $dir/private/ca.key.pem\n"
        cacnf+="RANDFILE        = $dir/private/.rand\n"
        cacnf+="x509_extensions = usr_cert\n"
        cacnf+="copy_extensions	= copy\n"
        cacnf+="unique_subject  = no\n"
        cacnf+="name_opt        = ca_default\n"
        cacnf+="cert_opt        = ca_default\n"
        cacnf+="default_crl_days= 30\n"
        cacnf+="default_days    = 365\n"
        cacnf+="default_md      = sha1\n"
        cacnf+="preserve        = no\n"
        cacnf+="policy          = policy_ca\n"
        cacnf+="\n"
        cacnf+="[ policy_ca ]\n"
        cacnf+="countryName             = optional\n"
        cacnf+="stateOrProvinceName     = optional\n"
        cacnf+="organizationName        = optional\n"
        cacnf+="organizationalUnitName  = optional\n"
        cacnf+="commonName              = supplied\n"
        cacnf+="emailAddress            = optional\n"
        cacnf+="\n"
        cacnf+="[ policy_anything ]\n"
        cacnf+="countryName             = optional\n"
        cacnf+="stateOrProvinceName     = optional\n"
        cacnf+="localityName            = optional\n"
        cacnf+="organizationName        = optional\n"
        cacnf+="organizationalUnitName  = optional\n"
        cacnf+="commonName              = supplied\n"
        cacnf+="emailAddress            = optional\n"
        cacnf+="\n"
        cacnf+="[ req ]\n"
        cacnf+="default_bits            = 4096\n"
        cacnf+="default_keyfile         = ./private/ca.key.pem\n"
        cacnf+="default_md              = sha1\n"
        cacnf+="prompt                  = no\n"
        cacnf+="distinguished_name      = root_ca_distinguished_name\n"
        cacnf+="x509_extensions         = v3_ca\n"
        cacnf+="string_mask             = nombstr\n"
        cacnf+="req_extensions          = v3_req\n"
        cacnf+="\n"
        cacnf+="[ usr_cert ]\n"
        cacnf+="basicConstraints        = CA:FALSE\n"
        cacnf+="subjectKeyIdentifier    = hash\n"
        cacnf+="authorityKeyIdentifier  = keyid,issuer:always\n"
        cacnf+="\n"
        cacnf+="[ v3_req ]\n"
        cacnf+="basicConstraints        = CA:FALSE\n"
        cacnf+="keyUsage                = nonRepudiation, digitalSignature, keyEncipherment\n"
        cacnf+="\n"
        cacnf+="[ v3_ca ]\n"
        cacnf+="subjectKeyIdentifier    = hash\n"
        cacnf+="authorityKeyIdentifier  = keyid:always,issuer:always\n"
        cacnf+="basicConstraints        = CA:true\n"
        return cacnf
    
    def build_server_cnf(self, args):
        logging.debug("arguments: %r" % args)
        """Return an openssl.cnf file with the correct emailAddress field, commonName field, and optional subjectAltName section"""
        # chunk1 is the part before the commonName field
        # then comes commonName
        # then emailAddress
        # then chunk2
        # then the subjectAltName stuff, if present
        chunk1= "# server openssl configuration file\n"
        chunk1+="HOME                    = .\n"
        chunk1+="RANDFILE                = $ENV::HOME/.rnd\n"
        chunk1+="\n"
        chunk1+="[ req ]\n"
        chunk1+="default_bits            = " + str(keysize) + "\n"
        chunk1+="default_md              = sha1\n"
        chunk1+="prompt                  = no\n"
        chunk1+="string_mask             = nombstr\n"
        chunk1+="\n"
        chunk1+="distinguished_name      = req_distinguished_name\n"
        chunk1+="\n"
        chunk1+="x509_extensions         = v3_req\n"
        chunk1+="req_extensions          = v3_req\n"
        chunk1+="\n"
        chunk1+="[ req_distinguished_name ]\n"
        chunk1+="countryName = US\n"
        chunk1+="stateOrProvinceName = .\n"
        chunk1+="localityName = .\n"
        chunk1+="organizationName = .\n"

        try:
            cn = args.commonName
        except AttributeError:
            cn = args.keyname
        except:
            raise
        cnline= "commonName = " + cn + "\n"
        logging.debug("cn is %r" % cn)

        # pull email address out of CA config file - probably need to figure out a better way to do this
        # it assumes there's only one emailAddress line
        fcacnf=open('ca.openssl.cnf','r')
        emailexpr = re.compile('emailAddress.*@.*')
        for line in fcacnf:
            match = emailexpr.search(line)
            if match != None:
                emailline = match.string
                break #to find only the first one
        else:
            emailline = "\n"
        fcacnf.close()

        chunk2= ""
        chunk2+="[ v3_req ]\n"
        chunk2+="nsCertType = server\n"
        chunk2+="basicConstraints = CA:FALSE\n"
        chunk2+="keyUsage = nonRepudiation, digitalSignature, keyEncipherment\n"

        try:
            san = args.subjectAltName
            # we need a separate list of ip addresses vs DNS names
            sanchunk="subjectAltName = @alt_names" + "\n\n" + "[ alt_names ]" + "\n"
            ip=[] 
            dns=[]
            for entry in san.split(","):
                # test if this is an IP address by asking the socket module
                # NOTE: just because it's not a dotted quad doesn't mean it's not valid! 
                # "4" is a valid IP address! 
                # this is not ideal b/c openssl doesn't accept IPs that are not dotted quads. <sigh>
                # NOTE2: currently this doesn't match ipv6 addresses
                # see also <http://stackoverflow.com/questions/319279/how-to-validate-ip-address-in-python>
                try:
                    socket.inet_aton(entry)
                    ip.append(entry)
                except:
                    # assume it's a hostname if it fails the socket test
                    dns.append(entry)

            # The commonName MUST also be in the subjectAltName list; if it isn't specified there by the user, add it
            try: 
                socket.inet_aton(cn)
                # looks like cn is an IP address. check for it in the ip list
                for entry in ip:
                    if (entry == cn): 
                        break
                else:
                    ip.append(cn)
            except:
                # looks cn isn't an IP address, so assume it's a hostname. check for it in the dns list. 
                for entry in dns:
                    if (entry == cn): 
                        break
                else:
                    dns.append(cn)

            seq=1
            for entry in dns:
                sanchunk += "DNS." + str(seq) + " = " + entry + '\n'
                seq+=1
            seq=1
            for entry in ip:
                sanchunk += "IP." + str(seq) + " = " + entry + '\n'
                seq+=1
        except AttributeError: # there is no args.subjectAltName
            sanchunk="\n"
        except:
            raise

        servercnf = chunk1 + cnline + emailline + chunk2 + sanchunk
        #logging.debug(servercnf)
        #print(servercnf)
        return servercnf

    def makecnf(self, args):
        fcnf=open("certified-keys/"+args.keyname+".openssl.cnf",'w')
        fcnf.write(MINIPKI.build_server_cnf(self,args))
        fcnf.close()
        
    def signcerts(self, args):
        logging.debug("signcerts args: %r" % args)
        keyname = args.keyname
        subprocess.check_call([opensslbin, "ca", "-batch", "-config",
                               "ca.openssl.cnf", "-in", "certified-keys/"+keyname+".csr",
                               "-out", "certified-keys/"+keyname+".cert", "-days", "7300"])
    
    def gensign(self, args):
        logging.debug("gensign args: %r" % args)
        MINIPKI.genprivkey(self,args)
        MINIPKI.signcerts(self,args)

    def make_ovpn_zip(self, args):
        import zipfile

        # zip files list
        zfl = {'cacrt':'ca.crt.pem', 
               'dh':'dh1024.pem',
               'crt':'certified-keys/'+args.keyname+'.cert',
               'key':'certified-keys/'+args.keyname+'.key'}

        for p in zfl:
            if not (os.path.exists(zfl[p])):
                print("Path '" + p + "' does not exist but is required, did you create the VPN CA and client private key and sign it? Exiting...")
                sys.exit(1)

        zfl['ovpn'] = 'certified-keys/'+args.vpnserver+'.ovpn'
        fovpn=open(zfl['ovpn'],'w')
        fovpn.write(MINIPKI.create_ovpn_config(self,args))
        fovpn.close()

        zovpn=zipfile.ZipFile('certified-keys/'+args.keyname+'.zip','w',zipfile.ZIP_STORED)
        for p in zfl:
            zovpn.write(zfl[p], #write this file
                        os.path.basename(zfl[p])) #to the same filename minus leading directories
        zovpn.close()

    def vpngensign(self, args):
        import zipfile
        MINIPKI.gensign(self,args)
        MINIPKI.make_ovpn_zip(self,args)

    def create_ovpn_config(self,args):
        ovpnfile =""
        ovpnfile+="client" + "\r\n"
        ovpnfile+="proto tcp-client" + "\r\n"
        ovpnfile+="dev tap" + "\r\n"
        ovpnfile+="dh dh1024.pem" + "\r\n"
        ovpnfile+="ca ca.crt.pem" + "\r\n"
        ovpnfile+='cert ' + args.keyname+'.cert' + '\r\n'
        ovpnfile+='key ' + args.keyname+'.key' + '\r\n'
        ovpnfile+='remote ' + args.vpnserver + ' ' + str(args.vpnport) + "\r\n"
        ovpnfile+="cipher BF-CBC" + "\r\n"
        ovpnfile+="verb 2" + "\r\n"
        ovpnfile+="mute 20" + "\r\n"
        ovpnfile+="keepalive 10 120" + "\r\n"
        ovpnfile+="comp-lzo" + "\r\n"
        ovpnfile+="persist-key" + "\r\n"
        ovpnfile+="persist-tun" + "\r\n"
        ovpnfile+="float" + "\r\n"
        ovpnfile+="resolv-retry infinite" + "\r\n"
        ovpnfile+="nobind" + "\r\n"
        ovpnfile+="route-method exe" + "\r\n"
        ovpnfile+="route-delay 2" + "\r\n"
        ovpnfile+="route 192.168.55.0 255.255.255.0 192.168.59.1 3" + "\r\n"
        return ovpnfile

    def examinecsr(self, args):
        for p in [args.csrfile, args.csrfile+".csr", "certified-keys/"+args.csrfile, "certified-keys/"+args.csrfile+".csr"]:
            if os.path.exists(p):
                csrfile=p
                break
        else:
            print("No such CSR file '" + args.csrfile + "', exiting...")
            sys.exit(1)
        subprocess.check_call([opensslbin, "req", "-in", csrfile, "-noout", "-text"])

def main(*args):
    global minipki
    minipki=MINIPKI()
    #logging.debug("main args: " + args)
    global opensslbin
    if (os.name == 'nt'):
        inpath=which("openssl.exe")
        if (inpath):
            opensslbin=inpath
        else:
            # check some known locations on Windows
            for path in [r"C:\Program Files\GnuWin32\bin\openssl.exe",
                         r"C:\Program Files (x86)\GnuWin32\bin\openssl.exe",
                         r"C:\Program Files\OpenVPN\bin\openssl.exe",
                         r"C:\Program Files (x86)\OpenVPN\bin\openssl.exe",
                         r"C:\git\bin\openssl.exe"]:
                if (is_exe(path)):
                    opensslbin=path
                    break
            else:
                # if after all that we have nothing, exit
                print("Can't find OpenSSL binary. Try adding the location of openssl.exe to your PATH environment variable. Exiting...")
                sys.exit(1)

    elif (os.name == 'posix'):
        # for POSIX systems we're just going to assume that openssl is in the path and $EDITOR is an existing env var. 
        inpath=which("openssl")
        if (inpath):
            opensslbin=inpath
        else:
            print("Can't find OpenSSL binary. Exiting...")
            sys.exit(1)

    argparser = argparse.ArgumentParser(description='Perform basic tasks for a mini-PKI')
    subparsers = argparser.add_subparsers()
    
    subparser_makecnf = subparsers.add_parser('makecnf', help="Generate an openssl.cnf file for a server")
    subparser_makecnf.add_argument('keyname', type=str, action='store', help='Supply a keyname, such as myserver or myserver.sub.domain.tld. By default, this also specifies a hostname')
    subparser_makecnf.add_argument('--commonName', action='store', help='Specify a hostname rather than use the keyname to use in the config file.')
    subparser_makecnf.add_argument('--subjectAltName',   action='store', help='A list of subjectAltName entries, separated by commas, such as myserver,myserver.domain.tld,10.10.10.10 .')
    subparser_makecnf.set_defaults(func=minipki.makecnf)

    subparser_examinecsr = subparsers.add_parser('examinecsr', help="Examine an existing CSR")
    subparser_examinecsr.add_argument('csrfile', action='store', help='Supply the path to a .csr file')
    subparser_examinecsr.set_defaults(func=minipki.examinecsr)

    subparser_genkey = subparsers.add_parser('genkey', help='Generate a private key & CSR for a server')
    subparser_genkey.add_argument('keyname', type=str, action='store', help='Supply a keyname, such as myserver or myserver.sub.domain.tld. The filenames for the cert, CSR, etc are based on this name. This subcommand also looks for an openssl configuration file named keyname.openssl.cnf; if it does not find one, it will generate one for you.')
    subparser_genkey.add_argument('--commonName', action='store', help='Specify a hostname rather than use the keyname to use in the config file.')
    subparser_genkey.add_argument('--subjectAltName',   action='store', help='A list of subjectAltName entries, separated by commas, such as myserver,myserver.domain.tld,10.10.10.10 .')
    subparser_genkey.add_argument('--cnf', action='store', help='An existing openssl.cnf file. Useful if all of your server certs can use the same file because the commonName is optional (as is the case with my OpenVPN setup).')
    subparser_genkey.set_defaults(func=minipki.genprivkey)
    
    subparser_sign = subparsers.add_parser('sign', help='Sign a CSR with an existing CA key')
    subparser_sign.add_argument('keyname', type=str, action='store', help='Supply a keyname, such as myserver or myserver.sub.domain.tld. The filenames for the cert, CSR, etc are based on this name.')
    subparser_sign.set_defaults(func=minipki.signcerts)

    subparser_gensign = subparsers.add_parser('gensign', help='Both generate and sign in one step')
    subparser_gensign.add_argument('keyname', type=str, action='store', help='Supply a keyname, such as myserver or myserver.sub.domain.tld. The filenames for the cert, CSR, etc are based on this name. This subcommand also looks for an openssl configuration file named keyname.openssl.cnf; if it does not find one, it will generate one for you.')
    subparser_gensign.add_argument('--commonName', action='store', help='Specify a hostname rather than use the keyname to use in the config file.')
    subparser_gensign.add_argument('--subjectAltName',   action='store', help='A list of subjectAltName entries, separated by commas, such as myserver,myserver.domain.tld,10.10.10.10 .')
    subparser_gensign.add_argument('--cnf', action='store', help='An existing openssl.cnf file. Useful if all of your server certs can use the same file because the commonName is optional (as is the case with my OpenVPN setup).')
    subparser_gensign.set_defaults(func=minipki.gensign)

    subparser_initca = subparsers.add_parser('initca', help='Initialize a Certificate Authority in this directory')
    subparser_initca.add_argument('--ca_commonName', '--commonName', dest='ca_commonName',action='store', required=True, help='REQUIRED. Provide a commonName for your new CA.')
    subparser_initca.add_argument('--organizationName', action='store', help='Recommended. Provide an organization name to be included on the CA certificate and any subsequent server certificates.')
    subparser_initca.add_argument('--emailAddress', action='store', help='Recommended. Provide an email address to be included on the CA certificate and any subsequent server certificates.')
    subparser_initca.add_argument('--countryName', action='store', help='Provide a country name to be included on the CA certificate and any subsequent server certificates.')
    subparser_initca.add_argument('--stateOrProvinceName', action='store', help='Provide a state or province name to be included on the CA certificate and any subsequent server certificates.')
    subparser_initca.add_argument('--localityName', action='store', help='Provide a locality name to be included on the CA certificate and any subsequent server certificates.')
    subparser_initca.add_argument('--purge', action='store_true', help='THIS OPTION WILL DELETE ALL FILES IN THE CURRENT DIRECTORY. It is really intended just for debugging.')
    subparser_initca.set_defaults(func=minipki.initca)

    subparser_vpnconfig = subparsers.add_parser('vpnconfig', help='Create a vpn configuration from an existing signed private key, and zip them all up.')
    subparser_vpnconfig.add_argument('keyname', type=str, action='store', help='Supply a keyname, such as jsmith. The filenames for the cert, CSR, etc are based on this name.')
    subparser_vpnconfig.add_argument('--vpnserver', action='store', required=True, help='Supply a hostname for the VPN server. Required.')
    subparser_vpnconfig.add_argument('--vpnport', action='store', type=int, default=1194, help='Supply a port for the VPN server. Default is 1194.')
    subparser_vpnconfig.set_defaults(func=minipki.make_ovpn_zip)

    subparser_vpngensign = subparsers.add_parser('vpngensign', help='Generate a VPN private key, sign it, create a VPN configuration from it, and zip them all up.')
    subparser_vpngensign.add_argument('keyname', type=str, action='store', help='Supply a keyname, such as jsmith. The filenames for the cert, CSR, etc are based on this name.')
    subparser_vpngensign.add_argument('--vpnserver', action='store', required=True, help='Supply a hostname for the VPN server. Required.')
    subparser_vpngensign.add_argument('--vpnport', action='store', type=int, default=1194, help='Supply a port for the VPN server. Default is 1194.')
    subparser_vpngensign.add_argument('--cnf', action='store', help='An existing openssl.cnf file. Useful if all of your certs can use the same file because the commonName is optional (as is the case with my OpenVPN setup).')
    subparser_vpngensign.set_defaults(func=minipki.vpngensign)

    parsed = argparser.parse_args()
    parsed.func(parsed)

if __name__ == '__main__':
    sys.exit(main(*sys.argv))


