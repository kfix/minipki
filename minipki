#!/usr/bin/env python3
# -*- mode: python -*-

# minipki
# Author: Micah R Ledbetter
# Acknowledgements: 
# - http://sial.org/howto/openssl/ca/
# - http://www.openssl.org/docs/apps/ca.html

import sys
import os
import shutil
import argparse
import logging
import subprocess
import socket
import re
import configparser
from string import Template

#scriptdir = os.path.abspath(os.curdir)
scriptpath = os.path.realpath(__file__)
scriptdir = os.path.dirname(scriptpath)

defaultconfigpath = os.path.join(scriptdir, 'config.default')
localconfigpath = os.path.join(scriptdir, 'config.local')
allconfig = configparser.ConfigParser()
allconfig.read([defaultconfigpath, localconfigpath])
config = allconfig['minipki']

# Set up some configuration that is derivable from what the user puts in
config['emailAddressLine'] = ""
if config['orgemail']:
    config['emailAddressLine'] = "emailAddress = " + config['orgemail']


CA_CNF = 'ca.openssl.cnf'

def debugprint(text):
    if config.getboolean('debug'):
        print("DEBUG: " + text)

if config.getboolean('debug'):
    from pdb import set_trace as strace
    logging.basicConfig(level=logging.DEBUG) 
else:
    def strace(): 
        pass

def is_exe(fpath):
    return os.path.exists(fpath) and os.access(fpath, os.X_OK)

def template_from_file(fname):
    rf = open(os.path.join(scriptdir, fname), 'r')
    data = rf.read()
    rf.close()
    return Template(data)

def which(program):
    fpath, fname = os.path.split(program)
    if fpath:
        if is_exe(program):
            return program
    else:
        for path in os.environ["PATH"].split(os.pathsep):
            exe_file = os.path.join(path, program)
            if is_exe(exe_file):
                return exe_file
    return None


def initca(args):
    if args.purge:
        for p in os.listdir("."): 
            if os.path.isfile(p) or os.path.islink(p): 
                os.unlink(p)
            elif os.path.isdir(p):
                shutil.rmtree(p)
    else: 
        for p in ["serial.txt", "index.txt", "private", "newcerts", 
                  "certified-keys", CA_CNF]:
            if (os.path.exists(p)):
                raise Exception("Path '{}' exists, exiting...".format(p))

    fcnf=open(CA_CNF,'w')
    fcnf.write(build_ca_cnf(args))
    fcnf.close()

    fserial=open("serial.txt","w")
    fserial.write("01")
    fserial.close()
    open("index.txt","w").close() #create an empty file
    os.mkdir("private",0o700)
    os.mkdir("newcerts",0o700)
    os.mkdir("certified-keys",0o700)

    proc = subprocess.Popen([opensslbin, 
                             "req", #request a new key
                             "-config", CA_CNF,

                             # don't create an encrypted key (& don't prompt 
                             # for enc password): 
                             "-nodes",  

                             # put out a self-signed cert instead of a csr; 
                             # required for a CA
                             "-x509", 
                             "-days", config['ca_valid_days'],

                             #will output to stdout otherwise
                             "-out", "ca.crt.pem", 

                             #create an RSA key store it where cnf says
                             "-newkey", "rsa:"+config['keysize']], 
                            env={"OPENSSL_CONF": CA_CNF})
    proc.wait()

def genprivkey(args):
    keyname=args.keyname
    logging.debug("genprivkey args: %r" % args)
    if args.cnf: 
        if not (os.path.exists(args.cnf)):
            raise Exception("Server configuration file specified on command ",
                            "line as {}, but file does ".format(args.cnf),
                            "not exist.")
        servercnf=args.cnf
    else:
        servercnf="certified-keys/"+keyname+".openssl.cnf"
        if not (os.path.exists(servercnf)):
            logging.debug("genprivkey: openssl configuration file not present, " +
                          "generating...")
            makecnf(args)

    proc = subprocess.Popen([opensslbin, "genrsa", "-out", 
                             "certified-keys/"+keyname+".key", config['keysize']],
                            env={"OPENSSL_CONF": servercnf})
    proc.wait()

    proc = subprocess.Popen([opensslbin, 
                             "req", 
                             "-new", 
                             "-nodes",
                             "-config", servercnf, 
                             "-key", "certified-keys/"+keyname+".key", 
                             "-out", "certified-keys/"+keyname+".csr"],
                            env={"OPENSSL_CONF": servercnf})
    proc.wait()

def build_ca_cnf(args):
    t = template_from_file('openssl.cnf.ca.template')

    cacnf = t.substitute(ca_commonName = config['ca_common_name'],
                         emailAddressLine = config['emailAddressLine'],
                         organizationName = config['orgname'],
                         countryName = config['country'],
                         default_keysize = config['keysize'])
    return cacnf

def makecnf(args):
    """
    Write out an openssl.cnf file with the correct emailAddress field, 
    commonName field, and optional subjectAltName section
    """
    logging.debug("arguments: %r" % args)

    t = template_from_file('openssl.cnf.server.template')

    if args.commonName:
        cn = args.commonName
    else:
        cn = args.keyname
    logging.debug("cn is %r" % cn)

    try:
        san = set(args.subjectAltName.split(",") + [cn])

        subjectAltNameLines = "subjectAltName = @alt_names" + "\n\n" 
        subjectAltNameLines+= "[ alt_names ]" + "\n"
        ip = dns = [] 

        for entry in san:
            # test if this is an IP address by asking the socket module
            try:
                socket.inet_aton(entry)
                ip.append(entry)
            except socket.error:
                # assume it's a hostname if it fails the socket test
                dns.append(entry)

        # note that OpenSSL needs it to start with DNS.1 not DNS.0
        for i in range(0, len(dns)):
            subjectAltNameLines += "DNS.{} = {}\n".format(i+1, dns[i])
        for i in range(0, len(ip)):
            subjectAltNameLines += "IP.{} = {}\n".format(i+1, ip[i])

    except AttributeError: # there is no args.subjectAltName
        subjectAltNameLines = ""

    servercnf = t.substitute(keysize = config['keysize'],
                             commonName = cn,
                             countryName = config['country'],
                             emailAddressLine = config['emailAddressLine'],
                             subjectAltNameLines = subjectAltNameLines)

    fcnf=open("certified-keys/"+args.keyname+".openssl.cnf",'w')
    fcnf.write(servercnf)
    fcnf.close()

def signcerts(args):
    logging.debug("signcerts args: %r" % args)
    keyname = args.keyname

    proc = subprocess.Popen([opensslbin, 
                             "ca", 
                             "-batch", 
                             "-config", CA_CNF,
                             "-in",  "certified-keys/"+keyname+".csr", 
                             "-out", "certified-keys/"+keyname+".cert", 
                             "-days", config['server_valid_days']],
                            env={"OPENSSL_CONF": CA_CNF})
    proc.wait()


def gensign(args):
    logging.debug("gensign args: %r" % args)
    genprivkey(args)
    signcerts(args)

def make_ovpn_zip(args):
    import zipfile

    # zip files list
    zfl = {'cacrt':'ca.crt.pem', 
           'dh':'dh1024.pem',
           'crt':'certified-keys/'+args.keyname+'.cert',
           'key':'certified-keys/'+args.keyname+'.key'}

    for p in zfl:
        if not (os.path.exists(zfl[p])):
            raise Exception("Path '{}' does not exist but is ".format(p), 
                            "required, did you create the VPN CA and client ",
                            "private key and sign it?")

    zfl['ovpn'] = 'certified-keys/{}.ovpn'.format(config['vpnserver'])
    fovpn=open(zfl['ovpn'],'w')
    fovpn.write(build_ovpn_config(args))
    fovpn.close()

    zovpn=zipfile.ZipFile('certified-keys/'+args.keyname+'.zip', 'w', 
                          zipfile.ZIP_STORED)

    # write each file to the same filename minus leading directories: 
    for p in zfl:
        zovpn.write(zfl[p],
                    os.path.basename(zfl[p]))
    zovpn.close()

    if args.installer or args.also_cacert:
        build_ovpn_nsis_installer(args)

def vpngensign(args):
    import zipfile
    gensign(args)
    make_ovpn_zip(args)

def build_ovpn_config(args):
    t = template_from_file('client.ovpn.template')
    ovpn = t.substitute(keyname = args.keyname,
                             vpnserver = config['vpnserver'],
                             vpnport = config['vpnport'],
                             vpnprotocol = config['vpnprotocol'])

    return ovpn

def build_ca_nsi(args):
    """Build the CA part of an NSI file which makensis can use.
    The file will *not* stand on its own; it's meant to be able to be 
    incorporated in a larger NSIS installer. If you want to create an installer
    for just the CA, use build_ca_nsi() along with build_castub_nsi().
    """
    t = template_from_file('ca.nsi.template')
    cansi = t.substitute(scriptdir = scriptdir,
                         organization = config['organization'])
    return cansi

def build_castub_nsi(args):
    """Generate an NSI file for just installing a CA to a user's trusted root 
    store. (Must be combined with the output of build_ca_nsi().)
    """
    t = template_from_file('castub.nsi.template')
    castubnsi = t.substitute(organization = config['organization'])
    return castubnsi

def build_ovpn_nsi(args):
    """Generate an NSI file for installing an OpenVPN configuration. Can be 
    combined with the output of build_ca_nsi() for a single installer exe which 
    will install bother OpenVPN configuration and a certificate authority.
    """
    t = template_from_file('ovpn.nsi.template')
    ovpnnsi = t.substitute(organization = config['organization'])
    return ovpnnsi


def build_ovpn_nsis_installer(args):
    os.makedirs(os.path.abspath(os.path.expanduser(args.output_path)), 
                exist_ok=True)
    output_exe = "{}/VPN-config-{}.exe".format(args.output_path, args.keyname)
    output_exe = os.path.abspath(os.path.expanduser(output_exe))
        
    config_zip = os.path.abspath(os.path.expanduser(
        'certified-keys/{}.zip'.format(args.keyname)))

    if args.also_cacert:
        # this means that the user supplied the --installer-with-ca argument
        # we abspath() it, because makensis requires absolute paths.
        # this also ensures backslash path separators, b/c nsis can't handle 
        # forward slash.
        also_cacert_path = os.path.abspath(os.path.expanduser(args.also_cacert))
        nsisargs=[makensisexe,
                  r'/DOUTPUT_EXE={}'.format(output_exe),
                  r'/DCONFIG_CACRT={}'.format(also_cacert_path),
                  r'/DCONFIG_ZIP={}'.format(config_zip),
                  r'{}'.format(ovpn_nsi_path),
                  r'{}'.format(ca_nsi_path)]
        fcnf=open(ca_nsi_path,'w')
        fcnf.write(build_ca_nsi(args))
        fcnf.close()
        fcnf=open(ovpn_nsi_path,'w')
        fcnf.write(build_ovpn_nsi(args))
        fcnf.close()
    else:
        # the user did not supply the --installer-with-ca argument
        # omit /DCONFIG_CACRT and the canh_path nsi file arguments
        nsisargs=[makensisexe,
                  r'/DOUTPUT_EXE={}'.format(output_exe),
                  r'/DCONFIG_ZIP={}'.format(config_zip),
                  r'{}'.format(ovpn_nsi_path)]
        fcnf=open(ovpn_nsi_path,'w')
        fcnf.write(build_ovpn_nsi(args))
        fcnf.close()

    logging.debug("Calling makensis.exe...")
    logging.debug(nsisargs)
    subprocess.check_call(nsisargs)

def build_ca_nsis_installer(args):
    output_exe = args.output_path + '/security-certificate.exe'
    output_exe = os.path.abspath(os.path.expanduser(output_exe))
                                    
    cacert_path = os.path.abspath(os.path.expanduser(args.cacert))

    nsisargs=[makensisexe,
              r'/DOUTPUT_EXE="{}"'.format(output_exe),
              r'/DCONFIG_CACRT="{}"'.format(cacert_path),
              r'"{}"'.format(castub_nsi_path),
              r'"{}"'.format(ca_nsi_path)]

    fcnf=open(ca_nsi_path,'w')
    fcnf.write(build_ca_nsi(args))
    fcnf.close()
    fcnf=open(castub_nsi_path,'w')
    fcnf.write(build_castub_nsi(args))
    fcnf.close()

    subprocess.check_call(nsisargs)


def examinecsr(args):
    possible_csrs =  [args.csrfile, args.csrfile+".csr", 
                      "certified-keys/"+args.csrfile, 
                      "certified-keys/"+args.csrfile+".csr"]
    for p in possible_csrs:
        if os.path.exists(p):
            csrfile=p
            break
    else:
        raise Exception("No such CSR file '{}', exiting...".format(args.csrfile))
    
    command = [opensslbin, "req", "-in", csrfile, "-noout", "-text"]
    environment = {"OPENSSL_CONF": CA_CNF}
    proc = subprocess.Popen(command, env=environment)
    proc.wait()

def dmisc(args):
    if args.action == 'pwd':
        print(os.getcwd())
    elif args.action == 'scriptdir':
        print(scriptdir)
    else:
        print("Action {} not defined.".format(args.action))

def main(*args):
    global opensslbin
    if (os.name == 'nt'):
        inpath=which("openssl.exe")
        if (inpath):
            opensslbin=inpath
        else:
            # check some known locations on Windows
            for path in [r"C:\Program Files\GnuWin32\bin\openssl.exe",
                         r"C:\Program Files (x86)\GnuWin32\bin\openssl.exe",
                         r"C:\Program Files\OpenVPN\bin\openssl.exe",
                         r"C:\Program Files (x86)\OpenVPN\bin\openssl.exe",
                         r"C:\git\bin\openssl.exe"]:
                if (is_exe(path)):
                    opensslbin=path
                    break
            else:
                # if after all that we have nothing, exit
                raise Exception("Can't find OpenSSL binary.")

    elif (os.name == 'posix'):
        # for POSIX systems we're just going to assume that openssl is in the 
        # path and $EDITOR is an existing env var. 
        inpath=which("openssl")
        if (inpath):
            opensslbin=inpath
        else:
            raise Exception("Can't find OpenSSL binary. Exiting...")

    h= 'Perform basic tasks for a mini-PKI'
    argparser = argparse.ArgumentParser(description=h)
    subparsers = argparser.add_subparsers()
    
    h="Generate an openssl.cnf file for a server"
    subparser_makecnf = subparsers.add_parser('makecnf', help=h)

    h =  'Supply a keyname, such as myserver or myserver.sub.domain.tld. '
    h += 'By default, this also specifies a hostname'
    subparser_makecnf.add_argument('keyname', type=str, action='store', help=h)

    h = 'Specify a hostname rather than use the keyname to use in the config '
    h+= 'file.'
    subparser_makecnf.add_argument('--commonName', action='store', help=h)


    san_help = 'A list of subjectAltName entries, separated by commas, such as '
    san_help+= 'myserver,myserver.domain.tld,10.10.10.10 .'
    subparser_makecnf.add_argument('--subjectAltName',   action='store', 
                                   help=san_help)

    subparser_makecnf.set_defaults(func=makecnf)

    subparser_examinecsr = subparsers.add_parser('examinecsr', 
                                                 help="Examine an existing CSR")
    subparser_examinecsr.add_argument('csrfile', action='store', 
                                      help='Supply the path to a .csr file')
    subparser_examinecsr.set_defaults(func=examinecsr)

    h='Generate a private key & CSR for a server'
    subparser_genkey = subparsers.add_parser('genkey', help=h)


    h = 'Supply a keyname, such as myserver or myserver.sub.domain.tld. '
    h+= 'The filenames for the cert, CSR, etc are based on this name. This '
    h+= 'subcommand also looks for an openssl configuration file named '
    h+= 'keyname.openssl.cnf; if it does not find one, it will generate '
    h+= 'one for you.'
    subparser_genkey.add_argument('keyname', type=str, action='store', help=h)

    h='Specify a hostname rather than use the keyname to use in the config '
    h+='file'
    subparser_genkey.add_argument('--commonName', action='store', help=h)

    subparser_genkey.add_argument('--subjectAltName',   action='store', 
                                  help=san_help)

    h ='An existing openssl.cnf file. Useful if all of your server certs can '
    h+='use the same file because the commonName is optional '
    h+='(as is the case with my OpenVPN setup).'
    subparser_genkey.add_argument('--cnf', action='store', help=h)

    subparser_genkey.set_defaults(func=genprivkey)
    
    h='Sign a CSR with an existing CA key'
    subparser_sign = subparsers.add_parser('sign', help=h)

    h ='Supply a keyname, such as myserver or myserver.sub.domain.tld. '
    h+='The filenames for the cert, CSR, etc are based on this name.'
    subparser_sign.add_argument('keyname', type=str, action='store', help=h)
    subparser_sign.set_defaults(func=signcerts)

    h='Both generate and sign in one step'
    subparser_gensign = subparsers.add_parser('gensign', help=h)

    h ='Supply a keyname, such as myserver or myserver.sub.domain.tld. The '
    h+='filenames for the cert, CSR, etc are based on this name. This '
    h+='subcommand also looks for an openssl configuration file named '
    h+='keyname.openssl.cnf; if it does not find one, it will generate one for '
    h+='you.'
    subparser_gensign.add_argument('keyname', type=str, action='store', help=h)

    h='Specify a hostname rather than use the keyname to use in the config '
    h+='file.'
    subparser_gensign.add_argument('--commonName', action='store', help=h)

    subparser_gensign.add_argument('--subjectAltName',   action='store', 
                                   help=san_help)

    h='An existing openssl.cnf file. Useful if all of your server certs can '
    h+='use the same file because the commonName is optional '
    h+='(as is the case with my OpenVPN setup).'
    subparser_gensign.add_argument('--cnf', action='store', help=h)

    subparser_gensign.set_defaults(func=gensign)

    h='Create a vpn configuration from an existing signed private key, and zip '
    h+='them all up.'
    subparser_vpnconfig = subparsers.add_parser('vpnconfig', help=h)

    h='Supply a keyname, such as jsmith. The filenames for the cert, CSR, etc '
    h+='are based on this name.'
    subparser_vpnconfig.add_argument('keyname', type=str, action='store', 
                                     help=h)

    h='Build an installer .exe for the OpenVPN configuration after generating '
    h+='it. See the readme file for more information on this option. ' 
    subparser_vpnconfig.add_argument('--installer', action='store_true', help=h)

    h='(Implies --installer.) '
    h+='Build an installer that includes BOTH the OpenVPN configuration AND a '
    h+='root CA that is installed to a user\'s trusted CAs. '
    h+='By default assumes that your VPN CA is the same as the trusted root '
    h+='CA, but you can specify an optional "cafile" argument if '
    h+='you have a separate PKI for browser certs and VPN certs.'
    subparser_vpnconfig.add_argument('--installer-with-ca', nargs='?', 
                                     type=str, const='ca.crt.pem',
                                     default=False, dest='also_cacert', 
                                     metavar='CACRT', help=h)

    subparser_vpnconfig.set_defaults(func=make_ovpn_zip)

    h='Specify the folder for the installer built by --installer or '
    h+='--installer-with-ca. Default is your home directory.'
    subparser_vpnconfig.add_argument('--installer-output', type=str, 
                                     dest='output_path', 
                                     default='~/', help=h)



    h='Generate a VPN private key, sign it, create a VPN configuration from it, '
    h+='and zip them all up.'
    subparser_vpngensign = subparsers.add_parser('vpngensign', help=h)

    h='Supply a keyname, such as jsmith. The filenames for the cert, CSR, etc '
    h+='are based on this name.'
    subparser_vpngensign.add_argument('keyname', type=str, action='store', 
                                      help=h)


    h='Build an installer .exe for the OpenVPN configuration after generating '
    h+='it. See the readme file for more information on this option. ' 
    subparser_vpngensign.add_argument('--installer', action='store_true', 
                                      help=h)

    h='(Implies --installer.) '
    h+='Build an installer that includes BOTH the OpenVPN configuration AND a '
    h+='root CA that is installed to a user\'s trusted CAs. '
    h+='By default assumes that your VPN CA is the same as the '
    h+='trusted root CA, but you can specify an optional "cafile" argument if '
    h+='you have a separate PKI for browser certs and VPN certs.'
    # notes to self: nargs=? means if it's present with a positional argument 
    # after, the posarg is used; if no posarg, const is used; if not present at
    # all, default is used. the dest setting means that's how you access the 
    # stored value, e.g. dest.cacrt will contain the posarg or ca.crt.pem or
    # False depending on how the user chooses. metavar is simply what is 
    # displayed when you run --help.
    subparser_vpngensign.add_argument('--installer-with-ca', nargs='?', 
                                      type=str, const='ca.crt.pem',
                                      default=False, dest='also_cacert', 
                                      metavar='CACRT', help=h)

    h='Specify the folder for the installer built by --installer or '
    h+='--installer-with-ca. Default is your home directory.'
    subparser_vpngensign.add_argument('--installer-output', type=str, 
                                      dest='output_path', default='~/', help=h)

    h='An existing openssl.cnf file. Useful if all of your certs can use the '
    h+='same file because the commonName is optional (as is the case with my '
    h+='OpenVPN setup).'
    subparser_vpngensign.add_argument('--cnf', action='store', help=h)

    subparser_vpngensign.set_defaults(func=vpngensign)

    h='Initialize a Certificate Authority in this directory'
    subparser_initca = subparsers.add_parser('initca', help=h)

    # This is just for developing shit
    if config.getboolean('debug'):
        subparser_debug = subparsers.add_parser('debug', 
                                                help='Debugging options...')
        subparser_debug.add_argument('action', type=str, action='store')
        subparser_debug.set_defaults(func=dmisc)

        h='THIS OPTION WILL DELETE ALL FILES IN THE CURRENT DIRECTORY. '
        h+='It is really intended just for debugging.'
        subparser_initca.add_argument('--purge', action='store_true', help=h)

    subparser_initca.set_defaults(func=initca)

    parsed = argparser.parse_args()
    try:
        parsed.func(parsed)
    except AttributeError:
        print(argparser.format_help())
        

if __name__ == '__main__':
    sys.exit(main(*sys.argv))


